#!/usr/bin/env python3
#
#  This is an extremely small, yaml-driven tool for doing simple file deployment and
#  templating sorts of tasks. It only requires Python and a couple of libraries.
#
#  Written by Sean Reifschneider, 2023
#  https://github.com/linsomniac/uplaybook
#  CC0 1.0 Universal, see LICENSE file for more information.

import sys
import os
import jinja2
import subprocess
import tempfile
import shutil
import re
import yaml
import random
import platform
import types
import socket
import stat
import multiprocessing
import itertools
import getpass
from collections import OrderedDict, namedtuple
from typing import Union, Tuple, List, Iterator, IO, Dict
import base64
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from pathlib import Path
import argparse
import time as time_module


PlaybookInfo = namedtuple("PlaybookInfo", ["name", "directory", "playbook_file"])


def get_playbook_search_paths() -> List[Path]:
    """
    Get the playbook search path (either the default or from the environment)
    and return an iterable of the path objects.

    Returns:
        List[Paths] for the list of locations to look for playbooks."""

    search_path = os.environ.get(
        "UP_PLAYBOOK_PATH",
        ".:.uplaybooks:~/.config/uplaybook/books:~/.config/uplaybook",
    )
    return [Path(x).expanduser().joinpath(".") for x in search_path.split(":")]


def get_playbook_docs(tasks: List) -> Dict:
    """Given a loaded playbook, return the documentation or an empty dict if none.

    Example:
        docs = get_playbook_docs(playbook_tasks)
        print(f"Description: {docs.get('desc')}")

    Args:
        tasks: An OrderedDict playbook.

    Returns:
        The documentation dictionary (empty if none found)."""
    for statement in tasks:
        command = list(statement.keys())[0]
        if command != "docs":
            continue
        command_value = statement[command]
        args = statement.copy()
        del args[command]
        return args
    return {}


def list_playbooks() -> Iterator[PlaybookInfo]:
    """
    Walk the playbook path and return a list of available playbooks.
    Playbook files take precedence over playbook/up.yml.  Sorted by
    playbook name within each component of the search path.

    Returns:

    """
    for playbook_path in get_playbook_search_paths():
        possible_playbooks = sorted(
            itertools.chain(
                playbook_path.glob("*.yml"), playbook_path.glob("*/up.yml")
            ),
            key=lambda x: x.name,
        )
        for playbook_file in possible_playbooks:
            if playbook_file.exists():
                directory = playbook_file.parent
                if playbook_file.name == "up.yml" and directory.as_posix() != ".":
                    name = directory.name
                else:
                    name = playbook_file.name
                yield PlaybookInfo(name, directory, playbook_file)


def find_playbook(playbookname: str) -> Path:
    """
    Finds and returns the path of a specified playbook file.

    Search for the playbook in the UP_PLAYBOOK_PATH environment variable,
    or a default if not specified.

    Args:
        playbookname (str): The name of the playbook file to search for.

    Returns:
        Path: The path of the found playbook file.

    Raises:
        FileNotFoundError: If the playbook file is not found in the search paths."""

    for playbook in list_playbooks():
        if playbook.name == playbookname or (
            playbook.name.endswith(".yml")
            and not playbookname.endswith(".yml")
            and playbook.name == (playbookname + ".yml")
        ):
            return playbook.playbook_file

    searchpath = get_playbook_search_paths()
    raise FileNotFoundError(
        f"Unable to locate a playbook by the name of {playbookname},"
        f" searched in path {searchpath}."
    )


def ordered_load(stream, Loader=yaml.SafeLoader, object_pairs_hook=OrderedDict):
    """Usage:
    ordered_load(stream, yaml.SafeLoader)
    From: https://stackoverflow.com/questions/5121931/in-python-how-can-you-load-yaml-mappings-as-ordereddicts
    """

    class OrderedLoader(Loader):
        pass

    def construct_mapping(loader, node):
        loader.flatten_mapping(node)
        return object_pairs_hook(loader.construct_pairs(node))

    OrderedLoader.add_constructor(
        yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, construct_mapping
    )
    return yaml.load(stream, OrderedLoader)


def unroll_loops(lst: List[OrderedDict]) -> List[OrderedDict]:
    """
    Unroll dictionaries containing a "loop" key with a list of dictionaries as its value.

    This function iterates through a list of dictionaries, and if an item
    has a "loop" key, it replaces the item with one item for each of the
    elements in the "loop" value list.  The new items are created by merging
    the outer dictionary with each inner dictionary, overwriting any keys
    in the outer dictionary with the values from the inner dictionary.

    Args:
        lst (List[OrderedDict]): A list of dictionaries, with some dictionaries
                potentially containing a "loop" key and a list of dictionaries as
                its value.

    Returns:
        List[OrderedDict]: A new list of dictionaries with the "loop" items unrolled.
    """
    result = []
    for task in lst:
        if "loop" in task:
            for item in task["loop"]:
                merged = OrderedDict()
                merged.update(task)
                merged.update(item)
                del merged["loop"]
                result.append(merged)
        else:
            result.append(task)
    return result


def timestr_to_secs(timestr: str) -> int:
    """
    Convert a time string to the number of seconds it represents.
    """
    if not timestr:
        raise ValueError("Time string cannot be empty")

    rx = (
        r"^((?P<random>random)\s+)?((?P<days>\d+)(d|days?)\s*)?((?P<hours>\d+)"
        r"(h|hr|hours?)\s*)?((?P<minutes>\d+)(m|min|minutes?)\s*)?((?P<seconds>\d+)"
        r"(s|sec|seconds?)?\s*)?(?P<random2>random)?$"
    )
    m = re.match(rx, timestr)
    if not m:
        raise ValueError(f'Unable to parse time string: "{timestr}"')

    groups = m.groupdict()
    seconds = 0
    for group, mult in (
        ("seconds", 1),
        ("minutes", 60),
        ("hours", 3600),
        ("days", 86400),
    ):
        if groups[group] is not None:
            seconds += int(groups[group]) * mult

    if groups["random"] is not None or groups["random2"] is not None:
        seconds = random.randint(1, seconds)
    return seconds


class SimplePrompt:
    """Fill in the "args" by prompting the user for values."""

    def __init__(self, arg: dict[str, object], globals: dict[str, str]):
        prompt_with: dict[str, object] = {
            "bool": self.ask_bool,
            "str": self.ask_str,
            "password": self.ask_password,
        }
        default = globals[arg["name"]]

        globals[arg["name"]] = prompt_with[arg["type"]](arg, default)

    def make_prompt(self, arg: dict[str, object], default: object) -> str:
        "Create a prompt string, including default value and line break if too long"
        prompt = f"{arg.get('label', arg['name'])}[{default}]"
        if len(prompt) + len(str(default)) > 70:
            prompt = prompt + "\n> "
        else:
            prompt += ": "
        return prompt

    def ask_bool(self, arg: dict[str, object], default: bool) -> bool:
        "Ask the user for a boolean value"
        default_str = {True: "y", False: "n"}.get(default, default)

        prompt = self.make_prompt(arg, default_str)
        while True:
            val = input(prompt).strip()
            if val == "":
                return default
            if val == "y" or val == "yes":
                return True
            if val == "n" or val == "no":
                return False
            print("Invalid choice, expected y/n.")

    def ask_str(self, arg: dict[str, object], default: str) -> str:
        "Ask the user for a string value"
        prompt = self.make_prompt(arg, default)
        val = input(prompt)
        if val.strip() == "":
            return default
        return val

    def ask_password(self, arg: dict[str, object], default: str) -> str:
        "Ask the user for a password"
        prompt = self.make_prompt(arg, default)
        val = getpass.getpass(prompt)
        if val.strip() == "":
            print("(FYI: Empty password provided)")
            return default
        return val


#  forklifting fernet ===============

encrypt_blocksize = 40960
decrypt_blocksize = 54712
salt_file_size = 20
magic = "#UF1#"


def read_fernet_header(fp: IO[bytes], raw: bool = False) -> bytes:
    "Read a fernet header, return the salt"
    length = salt_file_size + len(magic)
    if raw:
        length = 16

    data = fp.read(length)
    if raw:
        return data

    if not raw:
        if data[-len(magic) :].decode("ascii") != magic:
            raise ValueError("This does not look like a fernet file")

    return base64.b85decode(data[:salt_file_size])


def fernet_encrypt(
    input_file: str, output_file: str, password: str, raw: bool = False
) -> None:
    salt = os.urandom(16)

    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=960000,
    )
    key = base64.urlsafe_b64encode(kdf.derive(password.encode("ascii")))
    f = Fernet(key)

    with open(input_file, "rb") as infp, open(output_file, "wb") as outfp:
        if raw:
            outfp.write(salt)
        else:
            outfp.write(base64.b85encode(salt))
            outfp.write(magic.encode("ascii"))

        while True:
            data = infp.read(encrypt_blocksize)
            if not data:
                break
            outfp.write(f.encrypt(data))


def fernet_decrypt(
    input_file: str, output_file: str, password: str, raw: bool = False
) -> None:
    with open(input_file, "rb") as infp, open(output_file, "wb") as outfp:
        salt = read_fernet_header(infp, raw)

        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=960000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode("ascii")))
        f = Fernet(key)

        while True:
            data = infp.read(decrypt_blocksize)
            if not data:
                break
            outfp.write(f.decrypt(data))


#  END forklifting fernet ===============


#  forklifting symbolicmode ===============


def symbolic_to_numeric_permissions(
    symbolic_perm: str,
    initial_mode: int = 0,
    is_directory: bool = False,
    umask: Union[int, None] = None,
) -> int:
    """
    Convert a symbolic file permission string to its numeric equivalent.

    The function takes a symbolic permission description string in the format of
    `[ugoa][=,+,-][PERMS][,...]`.

    `ugoa` means "user", "group", "other", or "all" (short for "ugo"), representing
    the permissions to be set.  If none of "ugoa" are listed, it acts as if "a" was
    given, but applies the umask to the permission bits that are set.

    The available permission characters are `r` (read), `w` (write), `x` (execute),
    `X` (execute if a directory), `s` (setuid/setgid), and `t` (sticky bit), or a single
    character from: 'u', 'g', 'o'.

    Multiple operators+permissions may be specified after the "ugoa", as with the "chown"
    tool: "u=r+w-x".

    Args:
        symbolic_perm (str): The symbolic permission description string.
        initial_mode (int, optional): The mode to start off with.  If changing mode of an
                existing file, this is it's current mode, and can also impact 'X'.
        is_directory (bool, optional): A boolean indicating whether the file is a directory.
                This affects the behavior of the `X` permission. Defaults to False.
        umask (int, optional): Umask to use for "=[modes]" operation.  If not specified, the
                system umask will be used.

    Returns:
        int: The numeric (octal) representation of the file permissions.

    Raises:
        ValueError: When the permissions contain some invalid instruction.

    Examples:
        >>> symbolic_to_numeric_permissions("u=rwx,g=rx,o=r")
        0o754
        >>> symbolic_to_numeric_permissions("u=rwX", is_directory=True)
        0o700
        >>> symbolic_to_numeric_permissions("u=rws,g=rx,o=r")
        0o4754
        >>> symbolic_to_numeric_permissions("=rw", initial_mode=0o4777, is_directory=False, umask=0o027)
        0o640
    """

    #  Helpers
    def update_perm(operation: str, instruction_perms: int, current_perm: int) -> int:
        "Apply `operation` to the current perms and the instruction_perms"
        if operation == "=":
            return instruction_perms
        if operation == "+":
            return current_perm | instruction_perms
        return current_perm & ~instruction_perms

    def parse_instructions(permstr: str) -> Iterator[Tuple[str, str, str]]:
        """Parse the instruction into (lhs, op, rhs).  This also expands
        multi-operation expressions into multiple u/op/perm tuples."""
        rx = re.compile(r"([=+-][rwxXstugo]*)")
        for instruction in permstr.split(","):
            m = rx.split(instruction)
            if not m:
                raise ValueError(f"Invalid instruction: {instruction}")
            user = m[0]
            for op, perm in [(op_perm[0], op_perm[1:]) for op_perm in m[1::2]]:
                yield ((user, op, perm))

    def sum_premissions(perms_str: str) -> int:
        "Turn the permissions part of the statement into the numeric bits set"
        unique_perms = set(perms_str)
        if "x" in unique_perms and "X" in unique_perms:
            unique_perms.remove("X")  # prevent doubling "x" bit
        perms_sum = sum(
            perm_values.get(p, perm_values.get(p.upper(), 0)) for p in unique_perms
        )

        #  handle u/g/o in PERMS
        if ("u" in perms_str or "g" in perms_str or "o" in perms_str) and len(
            perms_str
        ) != 1:
            raise ValueError(
                "If u/g/o specified on RHS, only a single letter of u/g/o can be specified"
            )
        perms_sum = perms["u"] if perms_str == "u" else perms_sum
        perms_sum = perms["g"] if perms_str == "g" else perms_sum
        perms_sum = perms["o"] if perms_str == "o" else perms_sum

        return perms_sum

    def calc_special_bit(
        value: int,
        perms_str: str,
        operation: str,
        mode_char: str,
        bit_value: int,
        override: bool,
    ) -> int:
        "Calculate the special bits (suid/sgid/sticky)"
        if mode_char in perms_str:
            value = bit_value if operation in "+=" else 0
        value = (
            0
            if mode_char not in perms_str and operation == "=" and not override
            else value
        )
        return value

    # Define a mapping of symbolic permission characters to their corresponding numeric values
    perm_values = {"r": 4, "w": 2, "x": 1, "X": 1 if is_directory else 0, "-": 0}

    #  bits to shift based on u/g/o
    shift_by_user = {"u": 6, "g": 3, "o": 0}

    # Extract initial permissions and special bits
    perms = {
        "u": (initial_mode >> 6) & 0o7,
        "g": (initial_mode >> 3) & 0o7,
        "o": initial_mode & 0o7,
    }
    setuid_bit = 4 if initial_mode & 0o4000 else 0
    setgid_bit = 2 if initial_mode & 0o2000 else 0
    sticky_bit = 1 if initial_mode & 0o1000 else 0

    #  get umask from system if not specified
    if umask is None:
        umask = os.umask(0)
        os.umask(umask)

    for users, operation, perms_str in parse_instructions(symbolic_perm):
        #  if file: set X value if current perms have any 'x' bit set
        if not is_directory:
            perm_values["X"] = (
                1 if perms["u"] & 1 or perms["g"] & 1 or perms["o"] & 1 else 0
            )

        perm_sum = sum_premissions(perms_str)

        # Update the numeric file mode variables based on the users and operation
        effective_users = ("u", "g", "o") if users == "" or "a" in users else users
        for user in effective_users:
            apply_mask = (~umask if users == "" else 0o7777) >> shift_by_user[user]
            perms[user] = update_perm(operation, perm_sum & apply_mask, perms[user])

            #  set special bits
            if user == "u":
                setuid_bit = calc_special_bit(
                    setuid_bit, perms_str, operation, "s", 4, is_directory
                )
            if user == "g":
                setgid_bit = calc_special_bit(
                    setgid_bit, perms_str, operation, "s", 2, is_directory
                )
            if user == "o":
                sticky_bit = calc_special_bit(
                    sticky_bit, perms_str, operation, "t", 1, False
                )

    # Combine the numeric file modes for the owner, group, and others into a single numeric file mode
    return (
        ((setuid_bit + setgid_bit + sticky_bit) << 9)
        | (perms["u"] << 6)
        | (perms["g"] << 3)
        | (perms["o"])
    )


def chmod(mode: Union[int, str], path: Union[str, Path], recurse: bool = False) -> None:
    """
    Change the mode (permissions) of a specified file or directory.

    The mode can be specified as an integer, a string representing an octal integer
    or as a string representing symbolic permissions (e.g., 'u=rwx,g=r,o=r').

    Parameters
    ----------
    mode : int or str
        The mode (permissions) to be applied to the file or directory. The mode can
        be specified either as an integer, a string of digits (which are parsed as
        an octal integer), or as a string representing symbolic permissions (e.g.,
        'u=rwx,g=r,o=r').
    path : str or Path
        The path to the file or directory whose mode is to be changed.
    recurse : bool (default False)
        If true and "path" is a directory, do a depth-first recursion applying `mode`
        to the directory and all objects below it.

    Returns
    -------
    None

    Raises
    ------
    FileNotFoundError
        If the specified file or directory does not exist.
    PermissionError
        If the user does not have sufficient privileges to change the mode.
    ValueError
        If the specified mode is invalid.

    Examples
    --------
    # Change the mode of a file using an octal integer:
    chmod(0o755, '/path/to/file')

    # Change the mode of a file using a digit string:
    chmod('755', '/path/to/file')

    # Change the mode of a directory using symbolic permissions
    chmod('u=rwx,g=rx,o=r', '/path/to/directory')
    """

    def recurse_chmod(mode: Union[int, str], directory: Union[str, Path]) -> None:
        "Recursively apply chmod"
        for dir_path, dirnames, filenames in os.walk(directory, topdown=False):
            for filename in filenames:
                chmod(mode, os.path.join(dir_path, filename), recurse=False)
            for dirname in dirnames:
                chmod(mode, os.path.join(dir_path, dirname), recurse=False)

    mode_is_sym_str = type(mode) is str and not set(mode).issubset("01234567")

    if recurse or mode_is_sym_str:
        path_stat = os.stat(path)
        path_is_directory = stat.S_ISDIR(path_stat.st_mode)
        if path_is_directory and recurse:
            recurse_chmod(mode, path)

    if type(mode) is str:
        if not mode_is_sym_str:
            mode = int(mode, 8)
        else:
            path_mode = stat.S_IMODE(path_stat.st_mode)  # type: ignore
            mode = symbolic_to_numeric_permissions(
                mode, initial_mode=path_mode, is_directory=path_is_directory  # type: ignore
            )

    os.chmod(path, mode)  # type: ignore


#  END forklifting symbolicmode ===============


def platform_info() -> types.SimpleNamespace:
    """
    Linux:
         'arch': 'x86_64',
         'release_codename': 'jammy',
         'release_id': 'ubuntu',
         'os_family': 'debian',
         'release_name': 'Ubuntu',
         'release_version': '22.04',
         'system': 'Linux'

    MacOS:
        'arch': 'arm64',
        'release_version': '13.0.1',
        'system': 'Darwin'

    Windows:
        'arch': 'AMD64',
        'release_edition': 'ServerStandard',
        'release_name': '10',
        'release_version': '10.0.17763',
        'system': 'Windows'
    """
    env = types.SimpleNamespace()
    uname = platform.uname()
    env.system = platform.system()
    if env.system == "Linux":
        release = platform.freedesktop_os_release()
        env.release_name = release["NAME"]
        env.release_id = release["ID"]
        env.release_version = release["VERSION_ID"]
        env.release_like = release["ID_LIKE"]
        env.release_codename = release["VERSION_CODENAME"]
    if env.system == "Darwin":
        macver = platform.mac_ver()
        env.release_version = macver[0]
    if env.system == "Windows":
        env.release_version = uname.version
        env.release_name = uname.release
        env.release_edition = platform.win32_edition()
    env.arch = uname.machine
    env.cpu_count = multiprocessing.cpu_count()
    env.fqdn = socket.getfqdn()

    try:
        import psutil

        vm = psutil.virtual_memory()
        env.memory_total = vm.total
        env.memory_available = vm.available
        env.memory_used = vm.used
        env.memory_percent_used = vm.percent
    except ImportError:
        pass

    return env


class CommandProcessor:
    def __init__(self, template_dir: Path, playbook_name: Union[str, Path]) -> None:
        self.globals = {"environ": os.environ, "os": os, "platform": platform_info()}
        self.local_stack = []

        self.jinja_env = jinja2.Environment()
        self.jinja_env.filters["basename"] = os.path.basename
        self.jinja_env.filters["dirname"] = os.path.dirname
        self.jinja_env.filters["abspath"] = os.path.abspath
        self.template_dir = template_dir
        self.playbook_name = str(playbook_name)
        self.set_remaining_args(sys.argv[1:])

    def debug(self, msg):
        if not self.globals.get("up_debug"):
            return
        print(msg)

    def set(self, var: str, value) -> None:
        """Set a global value"""
        self.globals[var] = value

    def locals(self) -> dict:
        """Generate a dictionary of local variables."""
        r = {}
        for locals in self.local_stack:
            r.update(locals)
        return r

    def set_remaining_args(self, remaining_args: List) -> None:
        """Store the remaining command-line arguments after they have been parsed so far"""
        self.remaining_args = remaining_args

    def jinja_expand_str_none(
        self, s: Union[str, None], env_in: Union[None, dict] = None
    ) -> Union[str, None]:
        """Jinja2 template expand `s` using the environment `env_in`.
        If `s` is None, return None, otherwise return the template expanded version of `s`.
        """
        if s is None:
            return None
        return self.jinja_expand_str(s, env_in)

    def jinja_expand_str(self, s: str, env_in: Union[None, dict] = None) -> str:
        """Jinja2 template expand `s` using the environment `env_in`."""
        env = self.globals.copy()
        env.update(self.locals())
        if env_in is not None:
            env.update(env_in)
        return self.jinja_env.from_string(s).render(env)

    def run_tasks(self, tasks: List) -> None:
        """Run the given playbook tasks."""
        for statement in tasks:
            if not hasattr(statement, "keys"):
                tasks_str = str(tasks)[12:75]
                sys.stderr.write(
                    "ERROR: 'tasks' block does not look correct, did you forget to put a '-' at\n"
                    f"       the beginning of the tasks?\n       {tasks_str}\n"
                )
                sys.exit(1)

            command = list(statement.keys())[0]
            command_value = statement[command]
            args = statement.copy()
            del args[command]

            self.local_stack.append(args.get("vars", dict()))
            if "vars" in args:
                del args["vars"]

            try:
                func = getattr(self, f"do_{command}")
            except AttributeError:
                sys.stderr.write(f'ERROR: Unknown command "{command}"')
                sys.exit(1)
            func(command_value, **args)

            self.previous_command = command
            self.local_stack.pop()

    def find_file(self, filename: str) -> Path:
        """
        Finds and returns the path of a template/file.

        This function uses a colon-separated search path, either gotten from the
        UP_FILES_PATH environment variable or the default.  "..." specified in
        the search path is relative to the directory the playbook is found in.

        Returns:
        Path: The path of the found template file.

        Raises:
        FileNotFoundError: If the template file is not found in the search paths.
        """
        search_path = os.environ.get("UP_FILES_PATH", "...:.../files:.")

        for directory in search_path.split(":"):
            if directory == "...":
                p = self.template_dir.joinpath(filename)
                if p.exists():
                    return p
                continue
            if directory.startswith(".../"):
                p = self.template_dir.joinpath(directory[4:]).joinpath(filename)
                if p.exists():
                    return p
                continue

            p = Path(directory).joinpath(filename)
            if p.exists():
                return p

        raise FileNotFoundError(
            f"Could not find file {filename}, searched in {search_path}"
        )

    def evaluate(self, condition: Union[str, bool]) -> bool:
        """
        Determines if the given condition is True or False.

        This function accepts a condition that can be either a boolean value or a string
        representing a boolean expression.  If the condition is already a boolean value
        (due to a "false" in yaml), it returns the same value. If the condition is a
        string, the function evaluates the boolean expression and returns the result.

        The `eval` function is used to evaluate the expression, and the evaluation
        is performed in the context of the `self.globals` and `self.local_stack`
        dictionaries. Any variables used in the expression should be defined in them.

        Parameters
        ----------
        condition : Union[str, bool]
            The condition to evaluate.

        Returns
        -------
        bool
            The result of evaluating the condition.

        Raises
        ------
        TypeError
            If the `condition` is not a boolean value or a string.
        SyntaxError
            If the `condition` is a string with an invalid boolean expression.

        Examples
        --------
        >>> evaluate(True)
        True
        >>> evaluate(False)
        False
        >>> evaluate("3 > 2")
        True
        >>> evaluate("5 < 2")
        False
        """
        if condition is False:
            return False
        if condition is True:
            return True
        ret = eval(condition, self.globals, self.locals())
        return ret

    def jinja_expand_dict(self, d: dict) -> dict:
        env = self.globals.copy()
        env.update(self.locals())
        env.update(d)
        results = {}
        for k, v in d.items():
            if type(v) is not str:
                results[k] = v
                env[k] = str(v)
                continue
            newv = self.jinja_env.from_string(v).render(env)
            env[k] = newv
            results[k] = newv

        return results

    def encrypt(self, src: str, password: str) -> str:
        _, dst = tempfile.mkstemp()
        fernet_encrypt(src, dst, password)
        return dst

    def decrypt(self, src: str, password: str) -> str:
        _, dst = tempfile.mkstemp()
        fernet_decrypt(src, dst, password)
        return dst

    def decrypt_or_decrypt_args(
        self,
        src: str,
        dst: str,
        decrypt_password: Union[None, str],
        encrypt_password: Union[None, str],
        env: dict,
    ) -> Tuple[str, str]:
        if decrypt_password:
            decrypt_password = self.jinja_expand_str(decrypt_password, env)
            src = self.decrypt(src, decrypt_password)
        if encrypt_password:
            encrypt_password = self.jinja_expand_str(encrypt_password, env)
            src = self.encrypt(src, encrypt_password)

        return src, dst

    def ask(self, options: dict[str, str]) -> None:
        """Ask the user for values for the arguments"""
        while True:
            for arg in options:
                SimplePrompt(arg, self.globals)

            ok = input("Do you want to revise any answers above?  [Y/n] ").strip()
            if ok in ["no", "n"]:
                break

    def do_args(self, _, options) -> None:
        parser = argparse.ArgumentParser(prog=f"up:{self.playbook_name}")
        name_mapping: dict[str, str] = {}
        for arg in options:
            kw_args: dict[str, object] = {
                "type": str,
            }
            # orig_arg_name = arg["name"]
            arg_name = arg["name"].replace("_", "-")
            name_mapping[arg["name"]] = arg["name"]
            if "default" in arg:
                kw_args["dest"] = arg["name"]
                arg_name = "--" + arg_name
                kw_args["default"] = arg["default"]
            elif self.globals["up_ask"]:
                kw_args["dest"] = arg["name"]
                arg_name = "--" + arg_name
                kw_args["default"] = ""
            else:
                name_mapping[arg["name"]] = arg_name
            if "description" in arg:
                kw_args["help"] = arg["description"]
            if "type" in arg:
                kw_args["type"] = {
                    "bool": bool,
                    "str": str,
                    "int": int,
                    "password": str,
                }[arg["type"]]
            if kw_args["type"] is bool:
                kw_args["action"] = argparse.BooleanOptionalAction

            parser.add_argument(arg_name, **kw_args)
        args, remaining = parser.parse_known_args(self.remaining_args)
        self.set_remaining_args(remaining)

        args_vars = vars(args)
        for arg in options:
            self.globals[arg["name"]] = args_vars[name_mapping[arg["name"]]]

        if self.globals["up_ask"]:
            self.ask(options)

    def do_vars(self, _, **kv) -> None:
        self.globals.update(self.jinja_expand_dict(kv))

    #  deprecated: Renamed "config" to "vars"
    do_config = do_vars

    def do_copy(
        self,
        _,
        src: str,
        dst: str,
        skip: bool = False,
        decrypt_password: Union[None, str] = None,
        encrypt_password: Union[None, str] = None,
        mode: Union[None, int, str] = None,
    ) -> None:
        env = {"src": src, "dst": dst}
        src = self.jinja_expand_str(src, env)
        dst = self.jinja_expand_str(dst, env)
        src, dst = self.decrypt_or_decrypt_args(
            src, dst, decrypt_password, encrypt_password, env
        )

        self.debug(f"copy({src}  {dst})")
        if skip == "if_exists" and os.path.exists(dst):
            self.debug("Exists")
            return

        if "/" not in src:
            src = str(self.find_file(src))

        shutil.copy(src, dst)

        if mode:
            self.do_chmod(None, mode, dst)

    def do_template(
        self,
        _,
        src: str,
        dst: str,
        skip: bool = False,
        decrypt_password: Union[None, str] = None,
        encrypt_password: Union[None, str] = None,
        mode: Union[None, int, str] = None,
    ) -> None:
        env = {"src": src, "dst": dst}
        src = self.jinja_expand_str(src, env)
        dst = self.jinja_expand_str(dst, env)
        src, dst = self.decrypt_or_decrypt_args(
            src, dst, decrypt_password, encrypt_password, env
        )

        self.debug(f"template({src}  {dst})")
        if skip == "exists" and os.path.exists(dst):
            self.debug("Exists")
            return

        if "/" not in src:
            src = str(self.find_file(src))

        with open(src, "r") as fin:
            data = self.jinja_expand_str(fin.read(), env)
        with open(dst, "w") as fout:
            fout.write(data)

        if mode:
            self.do_chmod(None, mode, dst)

    def do_chmod(
        self, _, mode: Union[str, int], path: str, recurse: bool = False
    ) -> None:
        path = self.jinja_expand_str(path)
        if type(mode) is str:
            mode = self.jinja_expand_str(mode)
        self.debug(f"chmod({mode}, {path})")

        chmod(mode, path, recurse=recurse)

    def do_mkdir(self, _, path: str, parents: bool = True, skip: bool = False) -> None:
        path = self.jinja_expand_str(path)
        self.debug(f"mkdir({path})")
        if skip == "if_exists" and os.path.exists(path):
            self.debug("Exists")
            return

        if parents:
            os.makedirs(path)
        else:
            os.mkdir(path)

    def do_rm(self, _, path: str, recursive: bool = False) -> None:
        path = self.jinja_expand_str(path)
        self.debug(f"rm({path})")
        if not os.path.exists(path):
            return

        if recursive and os.path.isdir(path):
            shutil.rmtree(path)
            return

        os.remove(path)

    def do_run(
        self,
        _,
        command: str,
        register_stdout: Union[str, None] = None,
        register_stderr: Union[str, None] = None,
        register_exit: Union[str, None] = None,
    ) -> None:
        command = self.jinja_expand_str(command)
        self.debug(f"run({command})")
        sys.stdout.flush()
        sys.stderr.flush()
        p = subprocess.run(
            command,
            shell=True,
            text=True,
            stdout=subprocess.PIPE if register_stdout else None,
            stderr=subprocess.PIPE if register_stderr else None,
        )

        if register_exit:
            self.globals[register_exit] = p.returncode
        if register_stdout:
            self.globals[register_stdout] = p.stdout
        if register_stderr:
            self.globals[register_stderr] = p.stderr

    def do_cd(self, _, path: str) -> None:
        path = self.jinja_expand_str(path)
        self.debug(f"cd({path})")
        os.chdir(path)

    def do_docs(self, _, desc: str) -> None:
        pass

    def do_echo(
        self, _, msg: Union[str, None] = None, stderr: Union[str, None] = None
    ) -> None:
        stderr = self.jinja_expand_str_none(stderr)
        msg = self.jinja_expand_str_none(msg)
        self.debug(f"echo(msg={msg}, stderr={stderr})")
        if stderr is not None:
            sys.stderr.write(stderr + "\n")
        if msg is not None:
            print(msg)
        if stderr is None and msg is None:
            print()

    def do_block(self, _, tasks: List) -> None:
        self.debug("block()")
        self.run_tasks(tasks)

    def do_if(self, _, condition: str, tasks: List) -> None:
        if type(condition) is str:
            condition = self.jinja_expand_str(condition)
        self.debug(f"if({condition})")
        self.last_if_result = self.evaluate(condition)
        if not self.last_if_result:
            return
        self.run_tasks(tasks)

    def do_elif(self, _, condition: str, tasks: List) -> None:
        if type(condition) is str:
            condition = self.jinja_expand_str(condition)
        self.debug(f"elif({condition})")
        if self.previous_command not in ["if", "elif"]:
            raise ValueError('"elif" can only occur after a "if" or "elif"')
        if self.last_if_result:
            return
        self.last_if_result = self.evaluate(condition)
        if not self.last_if_result:
            return
        self.run_tasks(tasks)

    def do_else(self, _, tasks: List) -> None:
        self.debug("elif()")
        if self.previous_command not in ["if", "elif"]:
            raise ValueError('"else" can only occur after a "if" or "elif"')
        if self.last_if_result:
            return
        self.run_tasks(tasks)

    def do_exit(
        self,
        _,
        code: Union[int, str] = 0,
        msg: Union[str, None] = None,
        stderr: Union[str, None] = None,
    ) -> None:
        stderr = self.jinja_expand_str_none(stderr)
        msg = self.jinja_expand_str_none(msg)
        self.debug(f"exit({code}, msg={msg}, stderr={stderr})")
        if stderr is not None:
            sys.stderr.write(stderr + "\n")
        if msg is not None:
            print(msg)
        sys.exit(int(code))

    def do_pause(self, _, time: str) -> None:
        time = self.jinja_expand_str(time)
        time_module.sleep(timestr_to_secs(time))

    def do_stat(self, _, path: str, register: Union[str, None] = None) -> None:
        path = self.jinja_expand_str(path)
        self.debug(f"stat({path})")
        stat = os.stat(path)
        if register:
            self.globals[register] = stat

    def do_umask(
        self, _, mask: Union[str, int], register: Union[str, None] = None
    ) -> None:
        if type(mask) == str:
            mask = self.jinja_expand_str(str(mask))
            mask = int(mask, 8)
        self.debug(f"umask({mask:o})")
        old_mask = os.umask(int(mask))
        if register:
            self.globals[register] = old_mask


class UpArgumentParser(argparse.ArgumentParser):
    """Wrapper so that "up", when run with no arguments, lists available playbooks."""

    def print_usage(self, file=None):
        super().print_usage(file)
        self.list_playbooks()

    def print_help(self, file=None):
        super().print_help(file)
        self.list_playbooks()

    def list_playbooks(self):
        print()
        print("Available playbooks:")
        playbooks_seen = set()
        for playbook in list_playbooks():
            tasks = ordered_load(playbook.playbook_file.open("r"), yaml.SafeLoader)
            duplicate = (
                " *HIDDEN BY PREVIOUS PLAYBOOK*"
                if playbook.name in playbooks_seen
                else ""
            )
            playbooks_seen.add(playbook.name)
            print(f"  - {playbook.name} ({playbook.directory}{duplicate})")
            docs = get_playbook_docs(tasks)

            desc = docs.get("desc")

            if desc:
                print(f"      {desc}")
        print()


if __name__ == "__main__":
    parser = UpArgumentParser(
        prog="up",
        description="Run playbooks of actions, typically to set up some sort of environment.",
        add_help=True,
    )
    parser.add_argument(
        "--up-debug",
        action="store_true",
        help="Display additional debugging information during playbook run.",
    )
    parser.add_argument(
        "--up-ask",
        action="store_true",
        help="Interactively ask user for missing playbook arguments",
    )
    parser.add_argument("playbook")
    args, remaining_args = parser.parse_known_args()

    playbook_file = find_playbook(args.playbook)

    data = ordered_load(open(playbook_file, "r"), yaml.SafeLoader)
    data = unroll_loops(data)
    runner = CommandProcessor(playbook_file.parent, playbook_file.name)
    runner.set_remaining_args(remaining_args)
    runner.set("up_ask", args.up_ask)
    if args.up_debug:
        runner.set("up_debug", True)
    runner.run_tasks(data)
